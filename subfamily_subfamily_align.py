#!/usr/bin/env python

import sys, cPickle
from matchmaker.shmm_shmm_lib import *
from matchmaker.align_originals_via_shmms_and_score import *
from optparse import OptionParser

def main():
  usage = "%prog <seedX> <seedY> <shmmX_name>"
  opt_parser = OptionParser(usage=usage)
  # These options and their defaults should be kept in sync with
  # align_originals_via_shmms_and_score.py
  opt_parser.add_option("-c", "--cs", dest="compute_CS_score",
                        action="store_true", default=False,
                 help="Whether to compute Cline shift score;" +
                      " reference alignment in standard location required")
  opt_parser.add_option("-p", "--percentid", type="int", dest="percentid", 
                        default=20,
                        help="Minimum %id at which subfamilies were cut")
  opt_parser.add_option("-s", "--use_sciphy_subfams", dest="use_sciphy_subfams",
                        action="store_true", default=False,
                 help="Whether to use subfamilies and HMMs generated by SCI-PHY")
  opt_parser.add_option("-k", "--use_kerf_subfams", dest="use_sciphy_subfams",
                        action="store_false", default=False,
                        help="Whether to use subfamilies defined by %id")
  opt_parser.add_option("--use_kerfinfoshare_hmms",
                        dest="use_kerfinfoshare_hmms",
                        action="store_true", default=False,
                 help="Whether to use info-share hmms for kerf subfamilies")
  opt_parser.add_option("--use_kerfw05_hmms",
                        dest="use_kerfinfoshare_hmms",
                        action="store_false", default=False,
                        help="Whether to use w0.5 hmms for kerf subfamilies")
  opt_parser.add_option("-v", "--verbose", dest="verbose",
                        action="store_true", default=False,
                        help="Whether to print verbose output")
  opt_parser.add_option("-q", "--quiet", dest="verbose",
                        action="store_false", default=False,
                        help="Whether to suppress verbose output")
  opt_parser.add_option("--profile_profile_scoring_function",
                    dest="scoring_function", default="YL",
                    help="Scoring function for profile-profile alignment")
  opt_parser.add_option("--use_ss_in_hhalign", dest="use_ss_in_hhalign",
            action="store_true", default=True,
            help="Whether to use secondary structure prediction in hhalign")
  opt_parser.add_option("--no_use_ss_in_hhalign", dest="use_ss_in_hhalign",
          action="store_false", default=True,
          help="Whether not to use secondary structure prediction in hhalign")
  (options, args) = opt_parser.parse_args()

  if len(args) < 3:
    opt_parser.error("Must supply seedX, seedY, and shmmX_name.")

  seedX_id = args[0]
  seedY_id = args[1]
  shmmX_name = args[2]

  verbose = options.verbose
  set_verbose(options.verbose)
  set_percent_id(options.percentid)
  set_compute_CS_score(options.compute_CS_score)
  scoring_function = options.scoring_function
  using_hhalign = set_using_hhalign(scoring_function)
  set_hmm_dir(options.use_sciphy_subfams, options.use_kerfinfoshare_hmms,
              scoring_function, options.use_ss_in_hhalign)
  set_length_of_seed(seedX_id)
  set_length_of_seed(seedY_id)

  f = open(os.path.join(work_dir(seedX_id, seedY_id), 
                        "%s_shmm_names.pkl" % seedY_id))
  shmmY_names = cPickle.load(f)
  f.close()
  # Align each of the SHMMs for X to each of the SHMMs for Y
  print "Aligning shmms to shmms by %s profile-profile alignment" \
    % scoring_function
  for shmmY_name in shmmY_names:
    if verbose:
      print "Aligning %s to %s" % (shmmX_name, shmmY_name)
    align_hmm_to_hmm( seedX_id, seedY_id,
                      scoring_function,
                      shmmX_name, shmm_file_of_seed(seedX_id, shmmX_name),
                      shmmY_name, shmm_file_of_seed(seedY_id, shmmY_name))
  if not using_hhalign:
    # Align the profile consequence of each shmm to the other shmm
    for shmmY_name in shmmY_names:
      if verbose:
        print "Aligning profile consensus sequence of %s to %s" \
          % (shmmX_name, shmmY_name)
      shmmX_fa \
        = consensus_seq_file_of_hmm(seedX_id, shmmX_name)
      # SHMM_SEQ_X_SHMM_Y
      align_seq_to_hmm(
          hmmhmm_work_dir(seedX_id, seedY_id, shmmX_name, shmmY_name, 
                          seq_for_1_hmm_for_2, ""), 
         shmmX_name, shmmX_fa, shmmY_name, 
         shmm_file_of_seed(seedY_id, shmmY_name))
      if verbose:
        print "Aligning profile consensus sequence of %s to %s" \
          % (shmmY_name, shmmX_name)
      shmmY_fa = \
        consensus_seq_file_of_hmm(seedY_id, shmmY_name)
      # SHMM_X_SHMM_SEQ_Y
      align_seq_to_hmm(
          hmmhmm_work_dir(seedX_id, seedY_id, shmmX_name, shmmY_name,
                          hmm_for_1_seq_for_2, ""), 
          shmmY_name, shmmY_fa, shmmX_name, 
          shmm_file_of_seed(seedX_id, shmmX_name))

  print "Extracting pairwise alignments and scoring"
  if not using_hhalign:
    print "Using alignments of a profile consensus sequence to an HMM"
    for shmmY_name in shmmY_names:
      if verbose:
        print "Consensus sequence of %s to %s" % (shmmX_name, shmmY_name)
      align_and_score_originals_from_Xconsensus_seq_Yhmm( 
          seedX_id, shmmX_name, seedY_id, shmmY_name)
      if verbose:
        print "Consensus sequence of %s to %s" % (shmmY_name, shmmX_name)
      align_and_score_originals_from_Yconsensus_seq_Xhmm( 
          seedX_id, shmmX_name, seedY_id, shmmY_name)

  print "Using %s profile-profile alignments of two HMMs" \
    % scoring_function
  print "Using alignments of shmms for %s to shmms for %s" \
    % (seedX_id, seedY_id)
  for shmmY_name in shmmY_names:
    align_and_score_originals_from_hmm_hmm(
        seedX_id, seedY_id,
        shmmX_name, 
        shmm_file_of_seed(seedX_id, shmmX_name),
        shmmY_name, 
        shmm_file_of_seed(seedY_id, shmmY_name),
        scoring_function)
  print "subfamily_subfamily_alignment of %s_%s for %s is done" \
        % (seedX_id, seedY_id, shmmX_name)


if __name__ == '__main__':
  main()
